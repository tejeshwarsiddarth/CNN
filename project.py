# -*- coding: utf-8 -*-
"""mlproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DcvEkfzvyIU70mGs6Csbpn0sXiIuEC6t
"""

from keras.models import Sequential
from keras.layers import Dense,Flatten,Conv2D,MaxPool2D,Dropout
from keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt
from keras.datasets import cifar10
(xtrain,ytrain),(xtest,ytest) = cifar10.load_data()


type(xtrain)

xtrain.shape

xtrain[10]

img0 = plt.imshow(xtrain[30])

lab1 = ytrain[30]
print(lab1)

classification = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']

print("Image class is",classification[ytrain[30][0]])

ytrain_one_hot = to_categorical(ytrain)
ytest_one_hot = to_categorical(ytest)

xtrain = xtrain/255
xtest = xtest/255

xtrain[30]

#create the architecture
model=Sequential()
#first conv layer
model.add(Conv2D(32,(5,5),activation='relu',input_shape=(32,32,3)))
#Pooling Layer
model.add(MaxPool2D(pool_size=(2,2)))
#second conv
model.add(Conv2D(32,(5,5),activation='relu'))
#Pooling Layer two
model.add(MaxPool2D(pool_size=(2,2)))

#flattening layer
model.add(Flatten())

#add a layer
model.add(Dense(1000,activation='relu'))
#add Dropout layer
model.add(Dropout(0.5))

#add a layer
model.add(Dense(500,activation='relu'))
model.add(Dropout(0.5))

#add a layer
model.add(Dense(250,activation='relu'))

model.add(Dense(10,activation='softmax'))

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

tr = model.fit(xtrain,ytrain_one_hot,batch_size=256,epochs=1,validation_split=0.2)

model.evaluate(xtest,ytest_one_hot)

cat = plt.imread('/content/catpic.jpeg')
plt.imshow(cat)

from skimage import transform

resize = transform.resize(cat,(32,32,3))

img = plt.imshow(resize)

prediction = model.predict(np.array([resize]))
print(prediction)

list_index = [0,1,2,3,4,5,6,7,8,9]
x = prediction
for i in range(10):
  for j in range(10):
    if x[0][list_index[i]] > x[0][list_index[j]]:
      temp = list_index[i]
      list_index[i] = list_index[j]
      list_index[j] = temp
print(list_index)

for i in range(5):
  print(classification[list_index[i]])